/*
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the
resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7]
might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.
*/

#include<iostream>
using namespace std;

bool binarys(int arr[],int start,int end,int target){
	while(start<=end){
		int mid=start+(end-start)/2;
		if(arr[mid]==target)
		   return true;
		else if(arr[mid]>target)
		   end=mid-1;
		else
			start=mid+1;
	}
	return false;
}

int binarysearch(int n,int arr[]){
	int target;
	cout<<"Enter the value that you want to search in array"<<endl;
	cin>>target;
	int start=0,high=n-1,hi;
	while(start<=high){
		int mid=start+(high-start)/2;
		hi=mid-1;
		if(arr[mid]==target){
			return mid;
		}
		else if(binarys(arr,start,hi,target)==1){
			high=mid-1;
		}
		else{
			start=mid+1;
		}
		
	}
	return -1;
}

int main(){
	int n,arr[100];
	cout<<"Enter the size of the array"<<endl;
	cin>>n;

	cout<<"Enter the elements in the array"<<endl;
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}


	int index=binarysearch(n,arr);
	cout<<index;
}
